<?xml version="1.0" ?>
<launch>

  <!-- RTAB-MAP SLAM PARAMETERS -->
  <arg name="Odom/Strategy"           default="9" /> <!--0=Frame-to-Map (F2M) 1=Frame-to-Frame (F2F) 2=Fovis 3=viso2 4=DVO-SLAM 5=ORB_SLAM2 6=OKVIS 7=LOAM 8=MSCKF_VIO 9=VINS-Fusion -->
  <arg name="Kp/DetectorStrategy"     default="0"/>    <!-- 2=ORB  7=BRISK 8=GFTT/ORB 9=KAZE 10=ORB-OCTREE 11=SuperPoint 15=PyDetector" -->
  <arg name="Optimizer/Strategy"      default="1" />  <!-- "Graph optimization strategy: 0=TORO, 1=g2o, 3=Ceres.")-->
  <arg name="remap_gazebo_odom_tf"    default="false"/>
  <arg name="localization"            default="false"/> <!-- Localization-only mode -->
  <arg name="hector_odom"             default="false"/>
  <arg name="depth_from_lidar"        default="false"/>
  <param name="/use_sim_time"         value="true"/>
  <!-- RTAB-Map's parameters: do "rosrun rtabmap rtabmap (double-dash)params" to see the list of available parameters. -->
  <param name="RGBD/NeighborLinkRefining"      type="string" value="true"/>   <!-- Do odometry correction with consecutive laser scans -->
  <param name="RGBD/ProximityBySpace"          type="string" value="true"/>   <!-- Local loop closure detection (using estimated position) with locations in WM -->
  <param name="RGBD/ProximityByTime"           type="string" value="false"/>  <!-- Local loop closure detection with locations in STM -->
  <param name="RGBD/ProximityPathMaxNeighbors" type="string" value="10"/>     <!-- Do also proximity detection by space by merging close scans together. -->
  <param name="Reg/Strategy"                   type="string" value="1"/>      <!-- 0=Visual, 1=ICP, 2=Visual+ICP -->
  <param name="Vis/MinInliers"                 type="string" value="12"/>     <!-- 3D visual words correspondence distance -->
  <param name="RGBD/OptimizeFromGraphEnd"      type="string" value="false"/>  <!-- Optimize graph from initial node so /map -> /odom transform will be generated -->
  <param name="RGBD/OptimizeMaxError"          type="string" value="3"/>      <!-- Reject any loop closure causing large errors (>3x link's covariance) in the map -->
  <param name="Reg/Force3DoF"                  type="string" value="true"/>   <!-- 2D SLAM -->
  <param name="Grid/FromDepth"                 type="string" value="false"/>   <!-- Create 2D occupancy grid from laser scan -->
  <param name="Mem/STMSize"                    type="string" value="30"/>     <!-- increased to 30 to avoid adding too many loop closures on just seen locations -->
  <param name="RGBD/LocalRadius"               type="string" value="5"/>      <!-- limit length of proximity detections -->
  <param name="Icp/CorrespondenceRatio"        type="string" value="0.4"/>    <!-- minimum scan overlap to accept loop closure -->
  <param name="Rtabmap/MemoryThr"              type="string" value="0"/>  
  <param name="Rtabmap/TimeThr"                type="string" value="0"/>
  <param name="Odom/GuessMotion"                             value="true"/>   <!-- Use guess from previous motion for correspondences -->
  <param name="Vis/EstimationType"                           value="1"/>      <!--  # 2D->3D PnP  -->
  <param name="Vis/CorType"                                  value="1"/>      <!-- Optical Flow  -->
  <param name="GFTT/MinDistance"                             value="10"/>     <!-- default: 5, increased to have more distributed features across HD images -->
  <param name="RtabMap/DetectionRate"                        value="5"/>
  <param name="Grid/Sensor"                    type="string" value="0"/>      <!-- The occupancy grid map will be constructed from laser scans. To get occupancy grid map from camera's cloud projection, set "Grid/Sensor" to 1 -->
  <param name="Optimizer/GravitySigma"                       value="0.3"/>


  <!-- localization mode -->
  <param     if="$(arg localization)" name="Mem/IncrementalMemory" type="string" value="false"/>
  <param unless="$(arg localization)" name="Mem/IncrementalMemory" type="string" value="true"/>
  <param name="Mem/InitWMWithAllNodes" type="string" value="$(arg localization)"/>
  
  <!-- ################## RTAB-MAP SLAM ############################## -->
  <!-- Choose visualization -->
  <arg name="rviz"                    default="false" />
  <arg name="rtabmapviz"              default="true" /> 
  
  
  <!-- Corresponding config files -->
  <arg name="rtabmapviz_cfg"          default="$(find bacchus_slam)/rviz/rtabmap_gui.ini" />
  <arg name="rviz_cfg"                default="$(find rtabmap_ros)/launch/config/rgbd.rviz" />
  
  <arg name="frame_id"                default="base_link"/>   <!-- Fixed frame id, you may set "base_link" or "base_footprint" if they are published -->
  <arg name="database_path"           default="~/.ros/rtabmap.db"/>
  <arg name="launch_prefix"           default=""/>              <!-- for debugging purpose, it fills launch-prefix tag of the nodes -->
  <arg name="approx_sync"             default="true"/>         <!-- if timestamps of the input topics are not synchronized -->
   
  <arg name="rgb_topic"               default="/front/zed_node/rgb/image_rect_color" />
  <arg name="depth_registered_topic"  default="/front/zed_node/depth/depth_registered" />
  <arg name="camera_info_topic"       default="/front/zed_node/rgb/camera_info" />
  <arg name="compressed"              default="false"/>
   
  <arg name="subscribe_scan"          default="false"/>         <!-- Assuming 2D scan if set, rtabmap will do 3DoF mapping instead of 6DoF -->
  <arg name="scan_topic"              default="/scan"/>
  
  <arg name="subscribe_scan_cloud"    default="true"/>         <!-- Assuming 3D scan if set -->
  <arg name="scan_cloud_topic"        default="/os_cloud_node/points"/>
  
  <arg name="visual_odometry"         default="false"/>          <!-- Generate visual odometry -->
  <!-- <arg name="odom_topic"              default="/front/zed_node/odom"/>         Odometry topic used if visual_odometry is false -->
  <arg name="odom_frame_id"           default="odom"/>              <!-- If set, TF is used to get odometry instead of the topic -->


  <arg name="wait_imu_to_init"        default="true"/> 
  <arg name="imu_topic"               default="/front/zed_node/imu/data"/>

  <arg name="namespace"               default="rtabmap"/>
  <arg name="wait_for_transform"      default="0.2"/>
  <arg name="RGBD/OptimizeMaxError"   default="0" /> <!--Reject loop closures if optimization error ratio is greater than this value (0=disabled). Ratio is computed as absolute error over standard deviation of each link. This will help to detect when a wrong loop closure is added to the graph.-->
  <arg name="Reg/Force3DoF"           default="false"/> <!-- Force 3 degrees-of-freedom transform (3Dof: x,y and yaw). Parameters z, roll and pitch will be set to 0.-->

  <arg name="rgbd_sync"               default="false"/>  <!-- pre-sync rgb_topic, depth_topic, camera_info_topic -->
  <arg name="approx_rgbd_sync"        default="true"/> 

  <arg name="two_cameras"             default="false"/>
  <arg name="rgb2_topic"              default="/thorvald_001/kinect2_front_camera/rgb/image_raw" />
  <arg name="depth2_registered_topic" default="/thorvald_001/kinect2_front_sensor/ir/depth/image_raw" />
  <arg name="camera2_info_topic"      default="/thorvald_001/kinect2_front_camera/rgb/camera_info" />

  


  <group unless="$(arg localization)">

    <include file="$(find bacchus_slam)/launch/rtabmap.launch">
        <arg name="subscribe_rgb"           value="true"/>
        <arg name="depth"                   value="false"/>
        <arg name="rtabmapviz"              value="$(arg rtabmapviz)" /> 
        <arg name="rviz"                    value="$(arg rviz)" />
        <arg name="localization"            value="$(arg localization)"/>
        <arg name="gui_cfg"                 value="$(arg rtabmapviz_cfg)" />
        <arg name="rviz_cfg"                value="$(arg rviz_cfg)" />
      
        <arg name="frame_id"                value="$(arg frame_id)"/>
        <arg name="namespace"               value="$(arg namespace)"/>
        <arg name="database_path"           value="$(arg database_path)"/>
        <arg name="wait_for_transform"      value="$(arg wait_for_transform)"/>
        
        <arg name="launch_prefix"           value="$(arg launch_prefix)"/>          
        <arg name="approx_sync"             value="$(arg approx_sync)"/>

        <arg name="rgb_topic"               value="$(arg rgb_topic)" />
        <arg name="depth_topic"             value="$(arg depth_registered_topic)" />
        <arg name="camera_info_topic"       value="$(arg camera_info_topic)" />
        <arg name="compressed"              value="$(arg compressed)"/>                                                                                
      
        <arg name="subscribe_scan"          value="$(arg subscribe_scan)"/>
        <arg name="scan_topic"              value="$(arg scan_topic)"/>
      
        <arg name="subscribe_scan_cloud"    value="$(arg subscribe_scan_cloud)"/>
        <arg name="scan_cloud_topic"        value="$(arg scan_cloud_topic)"/>
      
        <arg name="visual_odometry"         value="$(arg visual_odometry)"/>          
        <!-- <arg name="odom_topic"              value="$(arg odom_topic)"/>     -->
        <arg name="odom_frame_id"           value="$(arg odom_frame_id)"/> 

        <arg name="wait_imu_to_init"        value="$(arg wait_imu_to_init)"/> 
        <arg name="imu_topic"               value="$(arg imu_topic)"/>
        
        <arg name="Reg/Force3DoF"          value="$(arg Reg/Force3DoF)"/>
        <arg name="Kp/DetectorStrategy"    value="$(arg Kp/DetectorStrategy)"/>
        <arg name="Optimizer/Strategy"     value="$(arg Optimizer/Strategy)"/>
        <arg name="RGBD/OptimizeMaxError"  value="$(arg RGBD/OptimizeMaxError)"/>
        
        <arg name="Odom/Strategy"           value ="$(arg Odom/Strategy)" />

        <arg  name="ground_truth_frame_id"      value="map"/>
        <arg  name="ground_truth_base_frame_id" value="base_link_GT"/>
        <arg name="rtabmap_args"                value="-d"/>
        <arg name="odom_args"                   value="-d"/>

        <!-- If depth generated from lidar projection (in case we have only a single RGB camera with a 3D lidar) -->
        <arg name="gen_depth"                  value="$(arg depth_from_lidar)" />
        <arg name="gen_depth_decimation"       value="4" />
        <arg name="gen_depth_fill_holes_size"  value="3" />
        <arg name="gen_depth_fill_iterations"  value="1" />
        <arg name="gen_depth_fill_holes_error" value="0.3" />

        <arg name="rgbd_sync"               value="$(arg rgbd_sync)"/>
        <arg name="approx_rgbd_sync"        value="$(arg approx_rgbd_sync)"/>
        <arg name="two_cameras"             value="$(arg two_cameras)"/>
        <arg name="rgb2_topic"               value="$(arg rgb2_topic)" />
        <arg name="depth2_topic"             value="$(arg depth2_registered_topic)" />
        <arg name="camera2_info_topic"       value="$(arg camera2_info_topic)" />

    </include>
  </group>

  <group if="$(arg localization)">

    <group if="$(arg hector_odom)">
      <node pkg="hector_mapping" type="hector_mapping" name="hector_mapping">
        <remap from="scan" to="/thorvald_001/scan" />
        <param name="odom_frame" type="string" value="base_link" />
        <param name="base_frame" type="string" value="base_link" />
        <param name="map_frame" type="string" value="odom" />
        <param name="map_resolution" type="double" value="0.05" />
        <param name="pub_map_odom_transform" type="bool" value="true" />
        <param name="pub_map_scanmatch_transform" value="false"/>
        <param name="pub_odometry" value="true"/>
      </node>
    </group>

    <include file="$(find bacchus_slam)/launch/rtabmap.launch">
        <arg name="rtabmapviz"              value="$(arg rtabmapviz)" /> 
        <arg name="rviz"                    value="$(arg rviz)" />
        <arg name="localization"            value="$(arg localization)"/>
        <arg name="gui_cfg"                 value="$(arg rtabmapviz_cfg)" />
        <arg name="rviz_cfg"                value="$(arg rviz_cfg)" />
      
        <arg name="frame_id"                value="$(arg frame_id)"/>
        <arg name="namespace"               value="$(arg namespace)"/>
        <arg name="database_path"           value="$(arg database_path)"/>
        <arg name="wait_for_transform"      value="$(arg wait_for_transform)"/>
        
        <arg name="launch_prefix"           value="$(arg launch_prefix)"/>          
        <arg name="approx_sync"             value="$(arg approx_sync)"/>

        <arg name="rgb_topic"               value="$(arg rgb_topic)" />
        <arg name="depth_topic"             value="$(arg depth_registered_topic)" />
        <arg name="camera_info_topic"       value="$(arg camera_info_topic)" />
        <arg name="compressed"              value="$(arg compressed)"/>                                                                                
      
        <arg name="subscribe_scan"          value="$(arg subscribe_scan)"/>
        <arg name="scan_topic"              value="$(arg scan_topic)"/>
      
        <arg name="subscribe_scan_cloud"    value="$(arg subscribe_scan_cloud)"/>
        <arg name="scan_cloud_topic"        value="$(arg scan_cloud_topic)"/>
      
        <arg name="visual_odometry"         value="$(arg visual_odometry)"/>          
        <!-- <arg name="odom_topic"              value="$(arg odom_topic)"/>     -->
        <arg name="odom_frame_id"           value="$(arg odom_frame_id)"/> 

        <arg name="wait_imu_to_init"        value="$(arg wait_imu_to_init)"/> 
        <arg name="imu_topic"               value="$(arg imu_topic)"/>
        
        <arg name="Reg/Force3DoF"          value="$(arg Reg/Force3DoF)"/>
        <arg name="Kp/DetectorStrategy"    value="$(arg Kp/DetectorStrategy)"/>
        <arg name="Optimizer/Strategy"     value="$(arg Optimizer/Strategy)"/>
        <arg name="RGBD/OptimizeMaxError"  value="$(arg RGBD/OptimizeMaxError)"/>
        
        <arg name="Odom/Strategy"           value ="$(arg Odom/Strategy)" />

        <arg  name="ground_truth_frame_id"      value=""/>
        <arg  name="ground_truth_base_frame_id" value=""/>
        <arg name="rtabmap_args"                value=""/>
        <arg name="odom_args"                   value=""/>

            <!-- If depth generated from lidar projection (in case we have only a single RGB camera with a 3D lidar) -->
        <arg name="gen_depth"                  value="$(arg depth_from_lidar)" />
        <arg name="gen_depth_decimation"       value="4" />
        <arg name="gen_depth_fill_holes_size"  value="3" />
        <arg name="gen_depth_fill_iterations"  value="1" />
        <arg name="gen_depth_fill_holes_error" value="0.3" />

        <arg name="rgbd_sync"               value="$(arg rgbd_synch)"/>
        <arg name="approx_rgbd_sync"        value="$(arg approx_rgbd_sync)"/>
        <arg name="two_cameras"             value="$(arg two_cameras)"/>
        <arg name="rgb2_topic"               value="$(arg rgb_topic)" />
        <arg name="depth2_topic"             value="$(arg depth_registered_topic)" />
        <arg name="camera2_info_topic"       value="$(arg camera_info_topic)" />

    </include>      
  </group>





  <group if="$(arg remap_gazebo_odom_tf)">
    <node pkg="bacchus_gazebo" type="remap_odom_and_tf.py" name="remap_odom_and_tf_node" output="screen">
      <param name="odom_topic_name"     value="/thorvald_001/odometry/gazebo" />
      <param name="new_odom_topic_name" value="/thorvald_001/odometry/GT" />
      <param name="base_frame_id"       value="base_link_GT" />
      <param name="odom_frame_id"       value="map" />   
      <param name="publish_tf"          value="true" />
    </node>
  </group>


</launch>
